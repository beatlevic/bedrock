@import '../../styles/responsive';

@padding: 2%;
@extraPadding: 4%;

.layout {
  display: flex;
  flex-flow: column;
  flex: auto;

  &.horizontal {
    flex-flow: row;
  }

  &.horizontal,
  &.center:not(.vertical):not(.horizontal) {
    @media @mobile {
      &:not(.stackable) {
        max-width: 100%;
        overflow-x: auto;
      }
    }

    &.stackable {
      @media @mobile {
        flex-flow: column;
      }
    }
    &.right {
      justify-content: flex-end;
    }
  }

  &.center {
    &.stackable {
      @media @desktop {
        align-items: center;
      }
    }
    &:not(.stackable) {
      align-items: center;
    }
    &:not(.vertical):not(.horizontal) {
      justify-content: center;
    }
  }

  &.stretch {
    align-items: stretch !important;
    height: 100%;
  }

  &.baseline {
    align-items: baseline;
  }

  &.top&.horizontal {
    &:not(.stackable) {
      align-items: flex-start;
    }
    &.stackable {
      @media @desktop {
        align-items: flex-start;
      }
    }
  }

  &.bottom&.horizontal {
    &:not(.stackable) {
      align-items: flex-end;
    }
    &.stackable {
      @media @desktop {
        align-items: flex-end;
      }
    }
  }

  &.spread {
    justify-content: space-between;
  }

  &.around {
    justify-content: space-around;
  }

  &.wrap {
    flex-wrap: wrap;
  }

  &.padded {
    // Vertical (stacking doesn't apply)
    &.vertical {
      .verticalPadding();
    }

    &:not(.vertical) {
      // Horizontal not stackable
      &:not(.stackable) {
        .horizontalPadding();
      }

      // Horizontal stackable
      &.stackable {
        @media @desktop {
          .horizontalPadding();

          &.reversed {
            flex-flow: row-reverse;
          }
        }
        @media @tablet {
          .horizontalPadding(0.5);
        }
        @media @mobile {
          .verticalPadding(0.8);
        }
      }
    }
  }

  &.horizontal {
    > .button:last-child,
    > .group > .button:last-child {
      margin-right: 0;
    }
  }
}

// Mixins

.horizontalPadding(@mult: 1) {
  > .group {
    :not(.reversed)& {
      &:not(:first-child) {
        .paddingLeft(@mult);
      }
      &:not(:last-child) {
        .paddingRight(@mult);
      }
    }

    .reversed& {
      &:not(:first-child) {
        .paddingRight(@mult);
      }
      &:not(:last-child) {
        .paddingLeft(@mult);
      }
    }
  }
}

.verticalPadding(@mult: 1) {
  > .group {
    padding-left: 0;
    padding-right: 0;

    &:not(:first-child) {
      .paddingTop(@mult);
    }
    &:not(:last-child) {
      .paddingBottom(@mult);
    }
  }
}

.paddingLeft(@mult: 1) {
  :not(.extra)& {
    padding-left: @padding;
  }
  .extra& {
    padding-left: @extraPadding * @mult;
  }
}

.paddingRight(@mult: 1) {
  :not(.extra)& {
    padding-right: @padding;
  }
  .extra& {
    padding-right: @extraPadding * @mult;
  }
}

.paddingTop(@mult: 1) {
  :not(.extra)& {
    padding-top: @padding;
  }
  .extra& {
    padding-top: @extraPadding * @mult;
  }
}

.paddingBottom(@mult: 1) {
  :not(.extra)& {
    padding-bottom: @padding;
  }
  .extra& {
    padding-bottom: @extraPadding * @mult;
  }
}
